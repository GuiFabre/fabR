% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/00-utils.R
\name{parceval}
\alias{parceval}
\title{Shortcut to turn String character into R code}
\usage{
parceval(...)
}
\arguments{
\item{...}{String character to be parsed and evaluated}
}
\description{
Shortcut to [base::parse()] and [base::eval()]uate R expression in a character string,
and turn it into runable R code. This function is targeted for interaction with
external files (where expression is stored in text format) ; for tidy elements where
code expression is generated using [tidyr::mutate()], combined with [base::paste0()] ;
in for while, map, etc. loops where character string expression can be indexed or
iteratively generated and evaluated ; objects to be created (using assign, <- or
<<- obj) where the name of the R object is stored in a string. Some issues may occur
when parceval is used in a different environment, such as in a function.
Prefer eval(parse(text = ...) instead.
}
\examples{
\dontrun{

# Simple assignation will assignate 'b' in parceval environment (which is associated
# to a function and different from .GlobalEnv, by definition).
# Double assignation will put 'b' in .GlobalEnv.
# (similar to assign(x = "b",value = 1,envir = .GlobalEnv))
a <- 1
parceval("b <<- 1")
print(a)
print(b)

parceval("b <<- b + a")
print(b)

my_code <- paste0("b <<- b + ",rep(1,3), "; message('value of b: ', b)")
parceval(my_code)

# use rowwise to directly use parceval in a tibble, or use a for loop.
as_tibble(cars) \%>\%
mutate(
  to_eval = paste0(speed,"/",dist)) \%>\%
rowwise() \%>\%
mutate(
  eval = parceval(to_eval))

# parceval can be parcevaled itself!

code_R <-
'as_tibble(cars) \%>\%
  mutate(
    to_eval = paste0(speed,"/",dist)) \%>\%
  rowwise() \%>\%
  mutate(
    eval = parceval(to_eval))'

code_R \%>\% cat
code_R \%>\% parceval


}

}
